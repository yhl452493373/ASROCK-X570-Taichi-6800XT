
/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Reset BGRT table Displayed status field to false.\nThis works around firmware that provide a BGRT table but fail to handle screen updates afterwards."; ObjectID = "0zY-cF-e9r"; */
"0zY-cF-e9r.ibShadowedToolTip" = "无法在有 BGRT 表的系统上显示 OEM Windows 标志的硬件需要开启.";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Base\nType: plist string\nFailsafe: Empty (Ignored)\nDescription: Selects ACPI path base for patch lookup (or immediate replacement) by obtaining the offset to the provided path.\n\nOnly fully-qualified absolute paths are supported (e.g. \\_SB_.PCI0.GFX0). Currently supported object types are: Device, Field, Method.\n\nNote: Use with care, not all OEM tables can be parsed. Use ACPIe utility to debug. ACPIe compiled with DEBUG=1 make command produces helpful ACPI lookup tracing. \n\n2. BaseSkip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found Base occurrences to skip before finds and replacements are applied.\n\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n4. Count\nType: plist integer\nFailsafe: 0 (Apply patch to all occurrences found)\nDescription: Number of occurrences to patch.\n\n5. Enabled\nType: plist boolean\nDefauFailsafe: false\nDescription: Set to true to apply this ACPI patch.\n\n6. Find\nType: plist data\nFailsafe: Empty\nDescription: Data to find. Must be equal to Replace in size if set.\n\nNote: Can be empty, when Base is specified, immediate replacement after Base lookup happens in this case.\n\n7. Limit\nType: plist integer\nFailsafe: 0 (Search entire ACPI table)\nDescription: Maximum number of bytes to search for.\n\n8. Mask\nType: plist data\nDefauFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Must be equal to Replace in size if set.\n\n9. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n\n10. Replace\nType: plist data\nFailsafe: Empty\nDescription: Replacement data of one or more bytes.\n\n11. ReplaceMask\nType: plist data\nFailsafe: Empty (Ignored)\nDescription: Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Must be equal to Replace in size if set.\n\n12. Skip\nType: plist integer\nFailsafe: 0 (Do not skip any occurrences)\nDescription: Number of found occurrences to skip before replacements are applied.\n\n13. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size equal to this value.\n\n14. TableSignature\nType: plist data, 4 bytes (Match any table signature)\nFailsafe: All zero\nDescription: Match table signature equal to this value."; ObjectID = "2tM-Ig-MFJ"; */
"2tM-Ig-MFJ.ibShadowedToolTip" = "这里我们需要填写一下ACPI的更名和修复补丁.\n在10.15中,一些资料指出我们需要把EC控制器(EC0)改名为EC来确保能进入10.15系统(当然也可以用EC仿冒补丁)\n华擎、华硕、微星主板可能会遇到RTC问题而无法进入系统,这同样需要添加补丁来修复\n具体补丁包可以查看宪武大神做的OC-Little补丁包https://github.com/daliansky/OC-little\n\n1. Base\n通过获取到所提供路径的偏移量来选择ACPI路径库以进行补丁查找（或立即替换）.\n\n仅支持完全限定的绝对路径（例如\\_SB_.PCI0.GFX0）.当前支持的对象类型是: Device, Field, Method.\n\n注意：请谨慎使用,并非所有OEM表都可以被解析.使用ACPIe实用程序进行调试.使用DEBUG=1 make命令编译的ACPIe会产生有用的ACPI查找跟踪. \n\n2. BaseSkip\n 设置为0:(不要跳过任何事件)\n在应用发现和替换之前要跳过的已发现基本事件的数量.\n\n3. Comment\n任意ASCII字符串,用于为条目提供可读的参考. 是否使用此值由实现定义.\n\n4. Count\n设置为0 (将补丁应用于发现的所有事件)\n要修补的出现次数.\n\n5. Enabled\n设置为true以应用此ACPI补丁.\n\n6. Find\n数据查找.如果设置,则必须等于替换大小.\n\n注意：如果指定了Base,则可以为空, 在这种情况下,发生基本查询后立即替换.\n\n7. Limit\n设置为0 (搜索整个ACPI表)\n搜索的最大字节数.\n\n8. Mask\n设置为空 (被忽略)\n查找比较期间使用的数据按位掩码. 通过忽略未屏蔽（设置为零）位来进行模糊搜索. 如果设置,则必须等于替换大小.\n\n9. OemTableId\n全为零 (匹配任何表的OEM ID)\n匹配表OEM ID等于此值.\n\n10. Replace\n一个或多个字节的替换数据.\n\n11. ReplaceMask\n替换期间使用的数据按位掩码. 通过更新屏蔽（设置为非零）位来允许模糊替换.如果设置,则必须等于替换大小.\n\n12. Skip\n设置为0 (不要跳过任何事件)\n应用替换之前要跳过的发现事件数.\n\n13. TableLength\n设置为0 (匹配任何表大小)\n匹配表大小等于此值.\n\n14. TableSignature\n(匹配任何表签名)\n匹配表签名等于该值";

/* Class = "NSTableColumn"; headerCell.title = "Mask"; ObjectID = "4j9-uJ-Gbu"; */
"4j9-uJ-Gbu.headerCell.title" = "Mask";

/* Class = "NSButtonCell"; title = "NormalizeHeaders"; ObjectID = "6NS-cZ-NZu"; */
"6NS-cZ-NZu.title" = "NormalizeHeaders";

/* Class = "NSTextFieldCell"; title = "Loading Resources"; ObjectID = "7g0-XW-xjy"; */
"7g0-XW-xjy.title" = "正在加载在线资源文件";

/* Class = "NSTableView"; ibShadowedToolTip = "1. All\nType: plist boolean\nFailsafe: false (Only delete the first matched table)\nDescription: Set to true to delete all ACPI tables matching the condition.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to remove this ACPI table.\n4. OemTableId\nType: plist data, 8 bytes\nFailsafe: All zero (Match any table OEM ID)\nDescription: Match table OEM ID equal to this value.\n5. TableLength\nType: plist integer\nFailsafe: 0 (Match any table size)\nDescription: Match table size to be equal to this value unless 0.\n6. TableSignature\nType: plist data, 4 bytes\nFailsafe: All zero (Match any table signature)\nDescription: Match table signature equal to this value.\n\nNote: Do not use table signatures when the sequence must be replaced in multiple places. This is particularly relevant when performing different types of renames."; ObjectID = "8sm-zn-vNl"; */
"8sm-zn-vNl.ibShadowedToolTip" = "禁用某个 ACPI 表, 比如常用于禁用 DAMR 来关闭 VT-d.";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n\n2. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true to add this ACPI table.\n\n3. Path\nType: plist string\nFailsafe: Empty\nDescription: File paths meant to be loaded as ACPI tables. Example values include DSDT.aml, SubDir/SSDT-8.aml, SSDT-USBX.aml, etc.\n\nACPI table load order follows the item order in the array. All ACPI tables load from OC/ACPI/Custom directory.\n\nNote: All tables apart from tables with a DSDT table identifier (determined by parsing data not by filename) insert new tables into the ACPI stack. DSDT tables perform a replacement of DSDT table instead."; ObjectID = "9ZU-zR-Tmy"; */
"9ZU-zR-Tmy.ibShadowedToolTip" = "这部分主要填写我们使用的ACPI补丁,以及DSDT文件,如果没有请把0-8的ssdt全部删除.如果你有修改的SSDT或者DSDT文件,请先将文件放入EFI/OC/ACPI下.\nACPI补丁是黑苹果的灵魂,针对OC的ACPI补丁请参阅宪武大神的OC-litte,https://github.com/daliansky/OC-little";

/* Class = "NSTableColumn"; headerCell.title = "Skip"; ObjectID = "A4Q-If-0AG"; */
"A4Q-If-0AG.headerCell.title" = "跳过次数后开始替换";

/* Class = "NSTableColumn"; headerCell.title = "TableLength"; ObjectID = "CVl-gt-v4L"; */
"CVl-gt-v4L.headerCell.title" = "ACPI表长度";

/* Class = "NSTableColumn"; headerCell.title = "Path*"; ObjectID = "CbM-86-go4"; */
"CbM-86-go4.headerCell.title" = "路径*";

/* Class = "NSBox"; title = "Quirks"; ObjectID = "DxA-Lh-I4Q"; */
"DxA-Lh-I4Q.title" = "Quirks";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "FLp-3q-DSv"; */
"FLp-3q-DSv.headerCell.title" = "启用";

/* Class = "NSButtonCell"; title = "EnableForAll"; ObjectID = "HdU-pu-zKX"; */
"HdU-pu-zKX.title" = "EnableForAll\n针对全部系统";

/* Class = "NSTableColumn"; headerCell.title = "Count"; ObjectID = "Ite-rF-5H2"; */
"Ite-rF-5H2.headerCell.title" = "替换次数";

/* Class = "NSTableColumn"; headerCell.title = "ReplaceMask"; ObjectID = "JFF-S2-t99"; */
"JFF-S2-t99.headerCell.title" = "替换Mask";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "JjS-7V-0PV"; */
"JjS-7V-0PV.headerCell.title" = "注释";

/* Class = "NSTableColumn"; headerCell.title = "Find"; ObjectID = "K4n-vm-jxn"; */
"K4n-vm-jxn.headerCell.title" = "查找";

/* Class = "NSMenuItem"; title = "List Of Patches"; ObjectID = "Kbb-Cq-tfz"; */
"Kbb-Cq-tfz.title" = "补丁列表";

/* Class = "NSTableColumn"; headerCell.title = "TableLength"; ObjectID = "MtH-av-7W0"; */
"MtH-av-7W0.headerCell.title" = "ACPI表长度";

/* Class = "NSButtonCell"; title = "Scan/Browse"; ObjectID = "Ndv-7C-25y"; */
"Ndv-7C-25y.title" = "快照添加";

/* Class = "NSTableColumn"; headerCell.title = "Replace"; ObjectID = "NtB-gi-4nw"; */
"NtB-gi-4nw.headerCell.title" = "替换";

/* Class = "NSTableColumn"; headerCell.title = "OemTableId"; ObjectID = "Nxc-pO-D4k"; */
"Nxc-pO-D4k.headerCell.title" = "OemTableId";

/* Class = "NSButtonCell"; title = "RebaseRegions"; ObjectID = "OG6-fc-Q9m"; */
"OG6-fc-Q9m.title" = "RebaseRegions";

/* Class = "NSButtonCell"; title = "ResetHwSig"; ObjectID = "Z6k-wb-4yC"; */
"Z6k-wb-4yC.title" = "ResetHwSig";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "c8a-dM-DNw"; */
"c8a-dM-DNw.headerCell.title" = "启用";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "cAx-1U-xJ9"; */
"cAx-1U-xJ9.headerCell.title" = "注释";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Cleanup ACPI header fields to workaround macOS ACPI implementation flaws that result in boot crashes. Reference: Debugging AppleACPIPlatform on 10.13 by Alex James (also known as theracermaster). The issue was fixed in macOS Mojave (10.14)."; ObjectID = "eza-Xg-dPF"; */
"eza-Xg-dPF.ibShadowedToolTip" = "清理ACPI头,一些主板的ACPI表需要打开这个修复启动.只有 macOS 10.13 需要";

/* Class = "NSButtonCell"; title = "ResetLogoStatus"; ObjectID = "fCv-Py-taQ"; */
"fCv-Py-taQ.title" = "Resetlogostatus";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "gIS-d5-pG5"; */
"gIS-d5-pG5.headerCell.title" = "注释";

/* Class = "NSTableColumn"; headerCell.title = "Limit"; ObjectID = "ger-9o-NnS"; */
"ger-9o-NnS.headerCell.title" = "限制";

/* Class = "NSTableColumn"; headerCell.title = "Base"; ObjectID = "h4B-GA-PeX"; */
"h4B-GA-PeX.headerCell.title" = "Base";

/* Class = "NSTableColumn"; headerCell.title = "BaseSkip"; ObjectID = "hIr-Vr-rVp"; */
"hIr-Vr-rVp.headerCell.title" = "BaseSkip";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Attempt to heuristically relocate ACPI memory regions. Not recommended.\n\nACPI tables are often generated dynamically by the underlying firmware implementation. Among the position- independent code, ACPI tables may contain the physical addresses of MMIO areas used for device configuration, typically grouped by region (e.g. OperationRegion). Changing firmware settings or hardware configuration, upgrading or patching the firmware inevitably leads to changes in dynamically generated ACPI code, which sometimes results in the shift of the addresses in the aforementioned OperationRegion constructions.\n\nFor this reason, the application of modifications to ACPI tables is extremely risky. The best approach is to make as few changes as possible to ACPI tables and to avoid replacing any tables, particularly DSDT tables. When this cannot be avoided, ensure that any custom DSDT tables are based on the most recent DSDT tables or attempt to remove reads and writes for the affected areas.\n\nWhen nothing else helps, this option could be tried to avoid stalls at PCI Configuration Begin phase of macOS booting by attempting to fix the ACPI addresses. It is not a magic bullet however, and only works with the most typical cases. Do not use unless absolutely required as it can have the opposite effect on certain platforms and result in boot failures."; ObjectID = "iWF-dk-0VK"; */
"iWF-dk-0VK.ibShadowedToolTip" = "换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响,一般不需要打开,使用自定义 DSDT 则必须开启";

/* Class = "NSTableColumn"; headerCell.title = "All"; ObjectID = "iwn-0u-n3y"; */
"iwn-0u-n3y.headerCell.title" = "全部";

/* Class = "NSTabViewItem"; label = "Patch"; ObjectID = "jB3-Fa-Mq9"; */
"jB3-Fa-Mq9.label" = "补丁";

/* Class = "NSButtonCell"; title = "Download/Update Acpi"; ObjectID = "l2s-yf-wZB"; */
"l2s-yf-wZB.title" = "下载/更新 Acpi文件";

/* Class = "NSButtonCell"; title = "FadtEnableReset"; ObjectID = "l7b-Bk-2B3"; */
"l7b-Bk-2B3.title" = "FadtEnableReset";

/* Class = "NSTableColumn"; headerCell.title = "TableSignature*"; ObjectID = "mHJ-L1-J8M"; */
"mHJ-L1-J8M.headerCell.title" = "ACPI表名 *";

/* Class = "NSTableColumn"; headerCell.title = "OemTableId"; ObjectID = "qk5-w1-h2Q"; */
"qk5-w1-h2Q.headerCell.title" = "OemTableId";

/* Class = "NSTabViewItem"; label = "Delete"; ObjectID = "swX-ck-WbC"; */
"swX-ck-WbC.label" = "删除";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Reset FACS table HardwareSignature value to 0.\nThis works around firmware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation."; ObjectID = "u3f-B9-p1e"; */
"u3f-B9-p1e.ibShadowedToolTip" = "存在重新启动后因无法维持硬件签名而导致从休眠中唤醒的问题的硬件需要开启.一般选择NO\n注意：此选项将来可能会被删除.";

/* Class = "NSTableColumn"; headerCell.title = "TableSignature*"; ObjectID = "wld-sU-lGp"; */
"wld-sU-lGp.headerCell.title" = "ACPI表名 *";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Provide reset register and flag in FADT table to enable reboot and shutdown.\n\nMainly required on legacy hardware and a few newer laptops. Can also fix power-button shortcuts. Not recommended unless required."; ObjectID = "xYB-OX-ce7"; */
"xYB-OX-ce7.ibShadowedToolTip" = "一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能,这里我们不许要启动它";

/* Class = "NSTabViewItem"; label = "Add"; ObjectID = "y3O-8J-sex"; */
"y3O-8J-sex.label" = "添加";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "z8k-hB-WoQ"; */
"z8k-hB-WoQ.headerCell.title" = "启用";

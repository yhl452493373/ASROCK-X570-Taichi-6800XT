
/* Class = "NSButtonCell"; title = "DEBUG_INFO in DEBUG, NOOPT"; ObjectID = "0hR-wG-mgt"; */
"0hR-wG-mgt.title" = "DEBUG,NOOPT中的DEBUG信息";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enable VirtualSMC-compatible authenticated restart.\n\nAuthenticated restart is a way to reboot FileVault 2 enabled macOS without entering the password. A dedicated terminal command can be used to perform authenticated restarts: sudo fdesetup authrestart. It is also used when installing operating system updates.\n\nVirtualSMC performs authenticated restarts by splitting and saving disk encryption keys between NVRAM and RTC, which despite being removed as soon as OpenCore starts, may be considered a security risk and thus is optional."; ObjectID = "0sy-D3-AKk"; */
"0sy-D3-AKk.ibShadowedToolTip" = "允许重启 FileVault2 分区时不用再次输密码, 有安全风险.\n与磁盘加密启动相关,一般选NO";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer, 64 bit\nFailsafe: 0\nDescription: Apple Enclave Identifier.\n\nSetting this value to any non-zero 64-bit integer will allow using personalised Apple Secure Boot identifiers. To use this setting, generate a random 64-bit number with a cryptographically secure random number generator. As an alternative, the first 8 bytes of SystemUUID can be used for ApECID, this is found in macOS 11 for Macs without the T2 chip.\n\nWith this value set and SecureBootModel valid (and not Disabled), it is possible to achieve Full Security of Apple Secure Boot.\n\nTo start using personalised Apple Secure Boot, the operating system must be reinstalled or personalised. Unless the operating system is personalised, macOS DMG recovery cannot be loaded. In cases where DMG recovery is missing, it can be downloaded by using the macrecovery utility and saved in com.apple.recovery.boot as explained in the Tips and Tricks section. Note that DMG loading needs to be set to Signed to use any DMG with Apple Secure Boot.\n\nTo personalise an existing operating system, use the bless command after loading to macOS DMG recovery. Mount the system volume partition, unless it has already been mounted, and execute the following command:\nbless bless --folder \"/Volumes/Macintosh HD/System/Library/CoreServices\" \\ --bootefi --personalize\n\nOn macOS versions before macOS 11, which introduced a dedicated x86legacy model for models without the T2 chip, personalised Apple Secure Boot may not work as expected. When reinstalling the operating system, the macOS Installer from macOS 10.15 and older will often run out of free memory on the /var/tmp partition when trying to install macOS with the personalised Apple Secure Boot. Soon after downloading the macOS installer image, an Unable to verify macOS error message will appear.\n\nTo workaround this issue, allocate a dedicated RAM disk of 2 MBs for macOS personalisation by entering the following commands in the macOS recovery terminal before starting the installation:\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume HFS+ SecureBoot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/OSPersonalizationTemp\ndiskutil mount -mountpoint /var/tmp/OSPersonalizationTemp $disk"; ObjectID = "0yA-ct-dgi"; */
"0yA-ct-dgi.ibShadowedToolTip" = "Apple Enclave标识符.\n将此值设置为任何非零的64位整数将允许使用个性化的Apple Secure Boot标识符.设置此值且SecureBootModel有效且未禁用的情况等效于实现Apple Secure Boot的完全安全性.如果要使用此设置,请确保使用加密安全的随机数生成器生成随机的64位数字. 设置此值且SecureBootModel有效且未禁用,可以实现Apple Secure Boot的完全安全性.\n\n注意 1: 您必须重新安装操作系统或使用macOS DMG恢复来祝福–将此值设置为非零后,个性化安装.只有通过macOS恢复或使用asr创建的个性化构建,才能安装ApECID值设置为非零的操作系统..\n\n注意 2: 当前,此选项的使用不可靠（显然是macOS安装程序中的错误）,因此不建议使用此选项.";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "1NZ-HO-WUF"; */
"1NZ-HO-WUF.headerCell.title" = "说明";

/* Class = "NSTableColumn"; headerCell.title = "Auxiliary"; ObjectID = "1fY-U6-4KQ"; */
"1fY-U6-4KQ.headerCell.title" = "辅助";

/* Class = "NSTableColumn"; headerCell.title = "Name"; ObjectID = "22Z-wl-E30"; */
"22Z-wl-E30.headerCell.title" = "名称";

/* Class = "NSButtonCell"; title = "Enable logging to Data Hub"; ObjectID = "2Qh-mc-sJw"; */
"2Qh-mc-sJw.title" = "启用记录到Data Hub";

//* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer\nFailsafe: 0\nDescription: A bitmask (sum) of enabled logging targets. Logging output is hidden by default and this option must be set when such output is required, such as when debugging.\nThe following logging targets are supported:\n• 0x01 — Enable logging, otherwise all log is discarded.\n• 0x02 — Enable basic console (onscreen) logging.\n• 0x04 — Enable logging to Data Hub.\n• 0x08 — Enable serial port logging.\n• 0x10 — Enable UEFI variable logging.\n• 0x20 — Enable non-volatile UEFI variable logging.\n• 0x40 — Enable logging to file.\n\nConsole logging prints less than the other variants. Depending on the build type (RELEASE, DEBUG, or NOOPT) different amount of logging may be read (from least to most).\n\nTo obtain Data Hub logs, use the following command in macOS (Note that Data Hub logs do not log kernel and kext patches):\nioreg -lw0 -p IODeviceTree | grep boot-log | sort | sed 's/.*<\\(.*\\)>.*/\\1/' | xxd -r -p\n\nUEFI variable log does not include some messages and has no performance data. To maintain system integrity, the log size is limited to 32 kilobytes. Some types of firmware may truncate it much earlier or drop completely if they have no memory. Using the non-volatile flag will cause the log to be written to NVRAM flash after every printed line.\nTo obtain UEFI variable logs, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-log | awk '{gsub(/%0d%0a%00/,\"\");gsub(/%0d%0a/,\"\\n\")}1'\n\nWarning: Certain firmware appear to have defective NVRAM garbage collection. As a result, they may not be able to always free space after variable deletion. Do not enable non-volatile NVRAM logging on such devices unless specifically required.\n\nWhile the OpenCore boot log already contains basic version information including build type and date, this information may also be found in the opencore-version NVRAM variable even when boot logging is disabled.\n\nFile logging will create a file named opencore-YYYY-MM-DD-HHMMSS.txt (in UTC) under the EFI volume root with log contents (the upper case letter sequence is replaced with date and time from the firmware). Please be warned that some file system drivers present in firmware are not reliable and may corrupt data when writing files through UEFI. Log writing is attempted in the safest manner and thus, is very slow. Ensure that DisableWatchDog is set to true when a slow drive is used. Try to avoid frequent use of this option when dealing with flash drives as large I/O amounts may speed up memory wear and render the flash drive unusable quicker.\n\nWhen interpreting the log, note that the lines are prefixed with a tag describing the relevant location (module) of the log line allowing better attribution of the line to the functionality."; ObjectID = "2Vb-s2-Ejp"; */
"2Vb-s2-Ejp.ibShadowedToolTip" = "0: 关闭日志记录\n3: 允许屏幕输出日志\n19: 允许屏幕输出 UEFI 变量日志\n67: 在 ESP 分区根目录生成日志文件 opencore-YYYY-MM-DD-HHMMSS.txt, 但屏幕上不显示日志!此功能需要用DEBUG版OC引导.";

/* Class = "NSButtonCell"; title = "Unselect All"; ObjectID = "2dj-hB-QBF"; */
"2dj-hB-QBF.title" = "取消全选";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Save macOS kernel panic output to the OpenCore root partition.\n\nThe file is saved as panic-YYYY-MM-DD-HHMMSS.txt. It is strongly recommended to set the keepsyms=1 boot argument to see debug symbols in the panic log. In cases where it is not present, the kpdescribe.sh utility (bundled with OpenCore) may be used to partially recover the stacktrace.\n\nDevelopment and debug kernels produce more useful kernel panic logs. Consider downloading and installing the KernelDebugKit from developer.apple.com when debugging a problem. To activate a development kernel, the boot argument kcsuffix=development should be added. Use the uname -a command to ensure that the current loaded kernel is a development (or a debug) kernel.\n\nIn cases where the OpenCore kernel panic saving mechanism is not used, kernel panic logs may still be found in the /Library/Logs/DiagnosticReports directory.\n\nStarting with macOS Catalina, kernel panics are stored in JSON format and thus need to be preprocessed before passing to kpdescribe.sh:\ncat Kernel.panic | grep macOSProcessedStackshotData | python -c 'import json,sys;print(json.load(sys.stdin)[\"macOSPanicString\"])'"; ObjectID = "2lk-2r-hIW"; */
"2lk-2r-hIW.ibShadowedToolTip" = "将macOS内核紧急情况保存到OpenCore根分区.\n该文件保存为panic-YYYY-MM-DD-HHMMSS.txt格式. 强烈建议使用keepsyms = 1引导参数来查看紧急日志中的调试符号. 如果不存在,则可以使用kpdescribe.sh实用程序（与OpenCore捆绑在一起）部分恢复堆栈跟踪.\n开发和调试内核会产生更多有用的内核恐慌. 考虑下载并安装\n调试时,请使用来自developer.apple.com的KernelDebugKit. 要激活开发内核,您将需要添加kcsuffix = development引导参数. 使用uname -a命令来确保当前加载的内核是开发（或调试）内核.\n如果未使用OpenCore内核应急保存机制,则可在/Library/Logs/Diagnostic目录中找到内核应急. 从macOS开始,Catalina内核紧急事件以JSON格式存储,因此在传递给kpdescribe.sh之前需要对其进行预处理： \ncat Kernel.panic | grep macOSProcessedStackshotData | python -c 'import json,sys;print(json.load(sys.stdin)[\"macOSPanicString\"])'";

/* Class = "NSButtonCell"; title = "Select All"; ObjectID = "3K9-EU-jse"; */
"3K9-EU-jse.title" = "全选";

/* Class = "NSTableColumn"; headerCell.title = "TextMode"; ObjectID = "3a7-m4-eNo"; */
"3a7-m4-eNo.headerCell.title" = "文本模式";

/* Class = "NSTabViewItem"; label = "Boot"; ObjectID = "3fm-9G-OpP"; */
"3fm-9G-OpP.label" = "Boot";

/* Class = "NSTabViewItem"; label = "Security"; ObjectID = "3fm-Nz-fHj"; */
"3fm-Nz-fHj.label" = "Security";

/* Class = "NSTextFieldCell"; title = "PickerVariant"; ObjectID = "4Mc-Dm-vYw"; */
"4Mc-Dm-vYw.title" = "PickerVariant\n启动界面主题";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string\nFailsafe: Builtin\nDescription: Choosepicker used for boot management.\n\nPickerMode describes the underlying boot management with an optional user interface responsible for handling boot options.\n\nThe following values are supported:\n• Builtin — boot management is handled by OpenCore, a simple text-only user interface is used.\n• External — an external boot management protocol is used if available. Otherwise, the Builtin mode is used.\n• Apple — Apple boot management is used if available. Otherwise, the Builtin mode is used.\n\nUpon success, the External mode may entirely disable all boot management in OpenCore except for policy enforcement. In the Apple mode, it may additionally bypass policy enforcement. Refer to the OpenCanopy plugin for an example of a custom user interface.\n\nThe OpenCore built-in picker contains a set of actions chosen during the boot process. The list of supported actions is similar to Apple BDS and typically can be accessed by holding action hotkeys during the boot process.\n\nThe following actions are currently considered:\n• Default — this is the default option, and it lets the built-in OpenCore picker load the default boot option as specified in the Startup Disk preference pane.\n• ShowPicker — this option forces the OpenCore picker to be displayed. This can typically be achieved by holding the OPT key during boot. Setting ShowPicker to true will make ShowPicker the default option.\n• ResetNvram — this option erases certain UEFI variables and is normally executed by holding down the CMD+OPT+P+R key combination during boot. Another way to erase UEFI variables is to choose Reset NVRAM in the OpenCore picker. This option requires AllowNvramReset to be set to true.\n• BootApple — this options performs booting to the first Apple operating system found unless the chosen default operating system is one from Apple. Hold the X key down to choose this option.\n• BootAppleRecovery — this option performs booting into the Apple operating system recovery partition. This is either that related to the default chosen operating system, or first one found when the chosen default operating system is not from Apple or does not have a recovery partition. Hold the CMD+R key combination down to choose this option.\n\nNote 1: On non-Apple firmware KeySupport, OpenUsbKbDxe, or similar drivers are required for key handling. However, not all of the key handling functions can be implemented on several types of firmware.\n\nNote 2: In addition to OPT, OpenCore supports using both the Escape and Zero keys to enter the OpenCore picker when ShowPicker is disabled. Escape exists to support co-existence with the Apple picker (including OpenCore Apple picker mode) and to support firmware that fails to report held OPT key, as on some PS/2 keyboards. In addition, Zero is provided to support systems on which Escape is already assigned to some other pre-boot firmware feature. In systems which do not require KeySupport, pressing and holding one of these keys from after power on until the picker appears should always be successful. The same should  apply when using KeySupport mode if it is correctly configured for the system, i.e. with a long enough KeyForgetThreshold. If pressing and holding the key is not successful to reliably enter the picker, multiple repeated keypresses may be tried instead.\n\nNote 3: On Macs with problematic GOP, it may be difficult to access the Apple picker. The BootKicker utility can be blessed to workaround this problem even without loading OpenCore. On some Macs however, the BootKicker utility cannot be run from OpenCore."; ObjectID = "5Or-M0-hZS"; */
"5Or-M0-hZS.ibShadowedToolTip" = "选择用于启动管理的启动选择器\n支持以下值:\n•Builtin(默认值)-引导管理由OpenCore处理,使用纯文本用户界面.\n•External-使用外部引导管理协议（如果可用),否则,将使用Builtin模式.\n•Apple-使用Apple引导管理(如果可用),否则,将使用Builtin模式.";

/* Class = "NSButtonCell"; title = "Enable UEFI variable logging"; ObjectID = "6U3-np-fQe"; */
"6U3-np-fQe.title" = "启用UEFI变量记录";

/* Class = "NSTextFieldCell"; title = "Timeout"; ObjectID = "6hf-UH-eBA"; */
"6hf-UH-eBA.title" = "Timeout\n等待时间";

/* Class = "NSButtonCell"; title = "HideAuxiliary"; ObjectID = "7BP-eo-vIZ"; */
"7BP-eo-vIZ.title" = "HideAuxiliary\n隐藏辅助条目";

/* Class = "NSTableColumn"; headerCell.title = "RealPath"; ObjectID = "7JW-1n-ZBx"; */
"7JW-1n-ZBx.headerCell.title" = "真实路径";

/* Class = "NSButtonCell"; title = "Expose OpenCore version in boot picker menu title."; ObjectID = "7NC-lm-XEM"; */
"7NC-lm-XEM.title" = "在启动菜单标题中显示OpenCore版本.";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Arguments\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used as boot arguments (load options) of the specified entry.\n2. Auxiliary\nType: plist boolean\nFailsafe: false\nDescription: Set to true to hide this entry when HideAuxiliary is also set to true. Press the Spacebar key to enter “Extended Mode” and display the entry when hidden.\n3. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide a human readable reference for the entry. Whether this value is used is implementation defined.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: Set to true activate this entry.\n5. Name\nType: plist string\nFailsafe: Empty\nDescription: Human readable entry name displayed in the OpenCore picker.\n6. Path\nType: plist string\nFailsafe: Empty\nDescription: Entry location depending on entry type.\n• Entries specify external boot options, and therefore take device paths in the Path key. Care should be exercised as these values are not checked. Example: PciRoot(0x0)/Pci(0x1,0x1)/.../\\EFI\\COOL.EFI\n• Tools specify internal boot options, which are part of the bootloader vault, and therefore take file relative to the OC/Tools directory. Example: OpenShell.efi.\n7. RealPath\nType: plist boolean\nFailsafe: false\nDescription: Pass full path to the tool when launching.\n\nThis should typically be disabled as passing the tool directory may be unsafe with tools that accidentally attempt to access files without checking their integrity. Reasons to enable this property may include cases where tools cannot work without external files or may need them for enhanced functionality such as memtest86 (for logging and configuration), or Shell (for automatic script execution).\n\nNote: This property is only valid for Tools and cannot be specified for Entries (is always true).\n8. TextMode\nType: plist boolean\nFailsafe: false\nDescription: Run the entry in text mode instead of graphics mode.\n\nThis setting may be beneficial for some older tools that require text output as all the tools are launched in graphics mode by default. Refer to the Output Properties section below for information on text modes."; ObjectID = "8Gl-6A-OsL"; */
"8Gl-6A-OsL.ibShadowedToolTip" = "用于指定OpenCore无法自动找到的无规律引导路径.\n名称:OpenCore启动项中显示的名称\n启用:启用或禁用\n辅助:设置条目为辅助条目,可在启动菜单中隐藏\n路径:\n引导磁盘的PCI路径,一般可以通过替换启动文件为DEBUG版本,然后勾选Disable WatchDog选项,Target选项填入67,启动一次后,在EFI分区里产生的日志文件里查找如: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\EFI\Microsoft\Boot\bootmgfw.efi这样的信息.\n可以提前在MACOS里使用diskutil info disk0s2 |grep \"UUID\"这样的命令提前获取到你想要启动的分区UUID,然后在日志文件里搜索UUID的值,可以快速获取到完整PCI路径!\n对于MOD的fork(MOD)版本,可在启动界面按F9保存所有启动设备路径到文件并保存在EFI分区\nTextMode(文本模式):是否以文本模式而不是图形模式运行条目";

/* Class = "NSTextFieldCell"; title = "PasswordSalt"; ObjectID = "8Xp-t8-QVB"; */
"8Xp-t8-QVB.title" = "PasswordSalt\n密码加盐";

/* Class = "NSButtonCell"; title = "Disable WatchDog"; ObjectID = "9LG-wP-7Np"; */
"9LG-wP-7Np.title" = "Disable WatchDog";

/* Class = "NSTextFieldCell"; title = "ApECID"; ObjectID = "A2A-xj-Bmf"; */
"A2A-xj-Bmf.title" = "ApECID";

/* Class = "NSButtonCell"; title = "DEBUG_WARN in DEBUG, NOOPT, RELEASE"; ObjectID = "AEq-Xa-8FR"; */
"AEq-Xa-8FR.title" = "DEBUG,NOOPT和DEBUG中的DEBUG警告";

/* Class = "NSButtonCell"; title = "Select All"; ObjectID = "Ai7-te-FXf"; */
"Ai7-te-FXf.title" = "全选";

/* Class = "NSTextFieldCell"; title = "Picker Mode"; ObjectID = "BYc-kG-loi"; */
"BYc-kG-loi.title" = "Picker Mode\n启动界面模式";

/* Class = "NSButtonCell"; title = "Expose OpenCore version as an UEFI variable."; ObjectID = "Bcn-4Z-d2d"; */
"Bcn-4Z-d2d.title" = "将OpenCore版本公开为UEFI变量.";

/* Class = "NSButtonCell"; title = "Scan/Browse"; ObjectID = "Bpe-6y-ybA"; */
"Bpe-6y-ybA.title" = "快照添加";

/* Class = "NSTextFieldCell"; title = "Expose Sensitive Data"; ObjectID = "DAS-KM-gwG"; */
"DAS-KM-gwG.title" = "Expose Sensitive Data";

/* Class = "NSButtonCell"; title = "Enable non-volatile UEFI variable logging"; ObjectID = "Da8-bR-9wd"; */
"Da8-bR-9wd.title" = "启用非易失性UEFI变量日志记录";

/* Class = "NSTableView"; ibShadowedToolTip = "Type: plist array\nDescription: Add custom scanning paths through bless model.\n\nDesigned to be filled with plist string entries containing absolute UEFI paths to customised bootloaders, for example, \\EFI\\debian\\grubx64.efi for Debian bootloader. This allows unusual boot paths to be automaticlly automatically discovered by the boot picker. Designwise they are equivalent to predefined blessed path, such as \\System\\Library\\CoreServices\\boot.efi or \\EFI\\Microsoft\\Boot\\bootmgfw.efi, but unlike predefined bless paths they have highest priority."; ObjectID = "E7L-MW-EuK"; */
"E7L-MW-EuK.ibShadowedToolTip" = "用于添加自定义efi文件的引导绝对路径,比如添加Windows的bootmgfw.efi的位置以便识别Windows引导项,一般在OpenCore和Windows的引导文件在同一硬盘的同一ESP分区下使用,除非你有这种情况,不然我们不需要填写任何东西.\n比如启动WINDOWS路径:\\EFI\\Microsoft\\Boot\\bootmgfw.efi\n这允许引导选择器自动发现异常的引导路径,也可用于其他操作系统的引导路劲";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_FS_ESP"; ObjectID = "Edm-Vw-KuX"; */
"Edm-Vw-KuX.title" = "允许扫描EFI系统分区文件系统.";

/* Class = "NSTextFieldCell"; title = "Display Delay"; ObjectID = "FHv-7q-Wq3"; */
"FHv-7q-Wq3.title" = "Display Delay";

/* Class = "NSButtonCell"; title = "SysReport"; ObjectID = "GOG-QD-oyI"; */
"GOG-QD-oyI.title" = "SysReport";

/* Class = "NSButtonCell"; title = "Select All"; ObjectID = "Gaf-gn-k6J"; */
"Gaf-gn-k6J.title" = "全选";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_FS_EXT"; ObjectID = "H6a-QA-xQu"; */
"H6a-QA-xQu.title" = "允许扫描EXT(Linux)文件系统.";

/* Class = "NSButtonCell"; title = "Enable serial port logging"; ObjectID = "HjZ-gH-Q0b"; */
"HjZ-gH-Q0b.title" = "启用串行端口日志记录";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_PCI"; ObjectID = "I0K-dq-ofU"; */
"I0K-dq-ofU.title" = "允许扫描PCI设备";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string\nFailsafe: Disabled\nDescription: Register the launcher option in the firmware preferences for persistence.\n\nValid values:\n• Disabled — do nothing.\n• Full — create or update the top priority boot option in UEFI variable storage at bootloader startup.\n\t– For this option to work, RequestBootVarRouting is required to be enabled.\n• Short — create a short boot option instead of a complete one.\n\t– This variant is useful for some older types of firmware, typically from Insyde, that are unable to manage full device paths.\n• System — create no boot option but assume specified custom option is blessed.\n\t– This variant is useful when relying on ForceBooterSignature quirk and OpenCore launcher path management happens through bless utilities without involving OpenCore.\n\nThis option allows integration with third-party operating system installation and upgrades (which may overwrite the \\EFI\\BOOT\\BOOTx64.efi file). The BOOTx64.efi file is no longer used for bootstrapping OpenCore if a custom option is created. The custom path used for bootstrapping can be specified by using the LauncherPath option.\n\nNote 1: Some types of firmware may have NVRAM implementation flaws, no boot option support, or other incompatibilities. While unlikely, the use of this option may result in boot failures and should only be used exclusively on the boards known to be compatible. Refer to acidanthera/bugtracker#1222 for some known issues affecting Haswell and other boards.\n\nNote 2: While NVRAM resets executed from OpenCore would not typically erase the boot option created in Bootstrap, executing NVRAM resets prior to loading OpenCore will erase the boot option. Therefore, for significant implementation updates, such as was the case with OpenCore 0.6.4, an NVRAM reset should be executed with Bootstrap disabled after which it can be re-enabled."; ObjectID = "IqM-FZ-Tdv"; */
"IqM-FZ-Tdv.ibShadowedToolTip" = "在固件首选项中注册启动器选项以实现持久性.\n可用值:\n• Disabled — 啥也不做.\n• Full — 在引导加载程序启动时,在UEFI变量存储中创建或更新最高优先级引导选项.为了使此选项起作用,需要启用RequestBootVarRouting.\n• Short — 创建一个短启动选项,而不是完整的启动选项.此选项对某些较旧的固件(尤其是Insyde)很有用,但可能对无法处理完整设备路径的其他固件无效.\n\n此选项在覆盖\\EFI\\BOOT\\BOOTx64.efi文件时提供与第三方操作系统安装和升级的集成.. 通过在此文件路径中创建自定义选项,该路径不再用于引导OpenCore. 用于启动的路径在LauncherPath选项中指定.\n\n注意 1: 某些类型的固件可能具有错误的NVRAM,不支持启动选项或其他不兼容性.虽然不太可能,但使用此选项甚至可能导致引导失败.该选项应在没有任何保证的情况下专门用于已知兼容的板上.\n\n注意 2: 请注意,从OpenCore执行NVRAM重置时,不应擦除在Bootstrap中创建的引导选项, 在加载OpenCore之前执行NVRAM重置将删除它. 对于重大的实施更新（例如,在OpenCore 0.6.4中）,请确保在重新启用前禁用Bootstrap来执行NVRAM重置.";

/* Class = "NSButtonCell"; title = "AllowNvramReset"; ObjectID = "Jpe-QB-x2r"; */
"Jpe-QB-x2r.title" = "AllowNvramReset\n启用重置Nvram功能";

/* Class = "NSButtonCell"; title = "Unselect All"; ObjectID = "KRE-fs-cVq"; */
"KRE-fs-cVq.title" = "取消全选";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string\nFailsafe: Signed\nDefine Disk Image (DMG) loading policy used for macOS Recovery.\n\nValid values:\n• Disabled — loading DMG images will fail. The Disabled policy will still let the macOS Recovery load in most cases as typically, there are boot.efi files compatible with Apple Secure Boot. Manually downloaded DMG images stored in com.apple.recovery.boot directories will not load, however.\n• Signed — only Apple-signed DMG images will load. Due to the design of Apple Secure Boot, the Signed policy will let any Apple-signed macOS Recovery load regardless of the Apple Secure Boot state, which may not always be desired. While using signed DMG images is more desirable, verifying the image signature may slightly slow the boot time down (by up to 1 second).\n• Any — any DMG images will mount as normal filesystems. The Any policy is strongly discouraged and will result in boot failures when Apple Secure Boot is active."; ObjectID = "KUQ-Na-LT4"; */
"KUQ-Na-LT4.ibShadowedToolTip" = "尝试提供引导加载程序的持久性.\n\n有效值s:\n• Disabled — 加载DMG映像将失败.\n• Signed — 仅Apple签署的DMG映像会加载.\n• Any — 任何DMG映像都将作为普通文件系统挂载.";

/* Class = "NSButtonCell"; title = "Provides custom rendered titles for boot entries"; ObjectID = "L3h-6q-xRi"; */
"L3h-6q-xRi.title" = "提供引导条目的自定义渲染标题";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Some types of firmware may not succeed in booting the operating system quickly, especially in debug mode, which results the watchdog timer aborting the process. This option turns off the watchdog timer."; ObjectID = "LCd-qL-7KC"; */
"LCd-qL-7KC.ibShadowedToolTip" = "如果macOS在启动时卡在某些地方, 可能需要设置为YES, 通常用于排除错误干扰";

/* Class = "NSComboBox"; ibShadowedToolTip = "Type: plist string\nFailsafe: Auto\nDescription: Choose specific icon set to be used for boot management.\n\nThe following values are supported:\n• Auto — Automatically select one set of icons based on the DefaultBackground colour.\n• Default — Normal icon set (without prefix).\n• Old — Vintage icon set (Old filename prefix).\n• Modern — Nouveau icon set (Modern filename prefix).\n• Other value — Custom icon set if supported by installed resources."; ObjectID = "M7r-QM-SNm"; */
"M7r-QM-SNm.ibShadowedToolTip" = "选择用于OC引导菜单的指定图标主题.\n\n支持以下值:\n• Auto — 根据默认背景颜色自动选择一组图标.\n• Default — (默认主题（所有图标文件无前缀名称,比如Apple.icns、Background.icns).\n• Old — Old主题(此为官方样板主题,所有图标文件名前缀为Old,比如OldApple.icns、OldBackground.icns).\n• Modern — Modern主题(所有图标文件名前缀为Modern,比如ModernApple.icns、ModernBackground.icns).\n• 其他值 — 可以自定义自己的主题风格,所有图标文件名加自己的前缀,比如MyApple.icns、MyBackground.icns,那么自定义的主题值就填写My.\n\n注意事项:\n选择任意一个主题,包括自定义主题的图标文件路径必须在EFI/OC/Resources/Image下有对应格式的文件名图标,对于0.6.6以上版本,必须有包含Left.icns和Right.icns的图标文件名,否则会变为文本模式菜单";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist data 64 bytes\nFailsafe: all zero\nDescription: Password hash used when EnabledPassword is set."; ObjectID = "NCW-lH-X8S"; */
"NCW-lH-X8S.ibShadowedToolTip" = "设置启用密码保护时使用密码哈希算法.";

/* Class = "NSButtonCell"; title = "Prefers builtin icons for certain icon categories to match the theme style"; ObjectID = "NFd-Yp-DAy"; */
"NFd-Yp-DAy.title" = "设置某些图标类别的内置图标以匹配主题样式";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "NXw-uw-Jsu"; */
"NXw-uw-Jsu.headerCell.title" = "启用";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Ignore boot options trying to update Apple peripheral firmware (e.g. MultiUpdater.efi).\n\nNote: Certain operating systems, such as macOS Big Sur, are incapable of disabling firmware updates by using the run-efi-updater NVRAM variable."; ObjectID = "Nph-Bb-8b6"; */
"Nph-Bb-8b6.ibShadowedToolTip" = "忽略尝试更新Apple外设固件的引导选项 (例如MultiUpdater.efi).\n\n注意: 由于某些操作系统（即macOS Big Sur）无法使用NVRAM变量（run-efi-updater）禁用固件更新,因此存在此选项.";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enable screen reader by default in the OpenCore picker.\n\nFor the macOS bootloader, screen reader preference is set in the preferences.efires archive in the isVOEnabled.int32 file and is controlled by the operating system. For OpenCore screen reader support, this option is an independent equivalent. Toggling screen reader support in both the OpenCore picker and the macOS bootloader FileVault 2 login window can also be done by using the Command + F5 key combination.\n\nNote: The screen reader requires working audio support. Refer to the UEFI Audio Properties section for details."; ObjectID = "PDS-bo-Qx8"; */
"PDS-bo-Qx8.ibShadowedToolTip" = "在启动选择器中启用屏幕语音助理功能.\n也可以使用Command + F5组合键在OpenCore引导选择器和macOS引导加载器FileVault 2登录窗口中切换屏幕语音助理功能.\ n注意：屏幕语音辅助功能需要加载AudioDxe.ef音频驱动.";

/* Class = "NSButtonCell"; title = "Unselect All"; ObjectID = "PDr-JO-EKf"; */
"PDr-JO-EKf.title" = "取消全选";

/* Class = "NSTextFieldCell"; title = "ConsoleAttributes"; ObjectID = "PIX-Ia-ajs"; */
"PIX-Ia-ajs.title" = "ConsoleAttributes\n文本启动菜单颜色";

/* Class = "NSButtonCell"; title = "BlacklistAppleUpdate"; ObjectID = "PPp-Ea-yQN"; */
"PPp-Ea-yQN.title" = "BlacklistAppleUpdate\n禁用Apple固件更新";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enable password protection to facilitate sensitive operations.\n\nPassword protection ensures that sensitive operations such as booting a non-default operating system (e.g. macOS recovery or a tool), resetting NVRAM storage, trying to boot into a non-default mode (e.g. verbose mode or safe mode) are not allowed without explicit user authentication by a custom password. Currently, password and salt are hashed with 5000000 iterations of SHA-512.\n\nNote: This functionality is still under development and is not ready for production environments."; ObjectID = "PbU-if-N7O"; */
"PbU-if-N7O.ibShadowedToolTip" = "启用密码保护以允许敏感操作.\n\n密码保护可确保敏感操作,例如引导非默认操作系统 (例如: macOS recovery或工具), 重置NVRAM存储,尝试引导到非默认模式 (例如: verbose(啰嗦)模式或safe(安全)模式) 如果没有通过自定义密码进行明确的用户身份验证,则不允许. 当前,密码和密码加盐值(一种对密码加密的算法)已通过SHA-512的5000000次迭代进行哈希处理.\n\n注意: 此功能当前正在开发中,尚不能用于日常使用.";

/* Class = "NSButtonCell"; title = "Browse"; ObjectID = "Pkl-Zl-stw"; */
"Pkl-Zl-stw.title" = "浏览EFI";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer\nFailsafe: 0\nDescription: Delay in microseconds executed after every printed line visible onscreen (i.e. console)."; ObjectID = "PwU-cB-LIO"; */
"PwU-cB-LIO.ibShadowedToolTip" = "在屏幕上可见的每条打印行(即控制台)之后执行的延迟(以微秒为单位).默认忽略!";

/* Class = "NSTextField"; ibShadowedToolTip = "TakeoffDelay \nType: plist integer, 32 bit \nFailsafe: 0\nDescription: Delay in microseconds executed before handling the OpenCore picker startup and action hotkeys. \n\nIntroducing a delay may give extra time to hold the right action hotkey sequence to e.g. boot to recovery mode. On some platforms setting this option to at least 5000-10000 microseconds may be necessary to access action hotkeys at all due to the nature of the keyboard driver."; ObjectID = "QGG-If-K71"; */
"QGG-If-K71.ibShadowedToolTip" = "在使用启动菜单和使用键盘快捷键之前执行的延迟（以微秒为单位）. \n使用这个选项可能会能更好的激活模拟苹果快捷键的功能,例如引导至恢复模式或其他.在某些平台上,由于键盘驱动程序的特性,可能完全需要将此选项设置为至少5000-10000微秒才能访问操作热键.";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string\nFailsafe: Secure\nDescription: Enables the OpenCore vaulting mechanism.\nValid values:\n• Optional — require nothing, no vault is enforced, insecure.\n• Basic — require vault.plist file present in OC directory. This provides basic filesystem integrity verification and may protect from unintentional filesystem corruption.\n• Secure — require vault.sig signature file for vault.plist in OC directory. This includes Basic integrity checking but also attempts to build a trusted bootchain.\n\nThe vault.plist file should contain SHA-256 hashes for all files used by OpenCore. The presence of this file is highly recommended to ensure that unintentional file modifications (including filesystem corruption) do not go unnoticed. To create this file automatically, use the create_vault.sh script. Notwithstanding the underlying file system, the path names and cases between config.plist and vault.plist must match.\n\nThe vault.sig file should contain a raw 256 byte RSA-2048 signature from a SHA-256 hash of vault.plist. The signature is verified against the public key embedded into OpenCore.efi.\n\nTo embed the public key, either one of the following should be performed:\n• Provide public key during the OpenCore.efi compilation in OpenCoreVault.c file.\n• Binary patch OpenCore.efi replacing zeroes with the public key between =BEGIN OC VAULT= and ==END OC VAULT== ASCII markers.\n\nThe RSA public key 520 byte format description can be found in Chromium OS documentation. To convert the\npublic key from X.509 certificate or from PEM file use RsaTool.\n\nThe complete set of commands to:\n• Create vault.plist.\n• Create a new RSA key (always do this to avoid loading old configuration).\n• Embed RSA key into OpenCore.efi.\n• Create vault.sig.\n\nCan look as follows:\ncd /Volumes/EFI/EFI/OC/path/to/create_vault.sh .\n/path/to/RsaTool -sign vault.plist vault.sig vault.pub\noff=$(($(strings -a -t d OpenCore.efi | grep \"=BEGIN OC VAULT=\" | cut -f1 -d' ')+16))\ndd of=OpenCore.efi if=vault.pub bs=1 seek=$off count=528 conv=notrunc\nrm vault.pub\n\nNote 1: While it may appear obvious, an external method is required to verify OpenCore.efi and BOOTx64.efi for secure boot path. For this, it is recommended to enable UEFI SecureBoot using a custom certificate and to sign OpenCore.efi and BOOTx64.efi with a custom key. More details on customising secure boot on modern firmware can be found in the Taming UEFI SecureBoot paper (in Russian).\n\nNote 2 : vault.plist and vault.sig are used regardless of this option when vault.plist is present or a public key is embedded into OpenCore.efi. Setting this option will only ensure configuration sanity, and abort the boot process otherwise."; ObjectID = "QZk-2b-TCx"; */
"QZk-2b-TCx.ibShadowedToolTip" = "在OpenCore中启用安全保险柜机制.\n•Optional-不启用任何安全机制,一般我们选这个.\n•Basic-要求OC目录中存在vault.plist文件.这提供了基本的文件系统完整性验证,并可以防止意外的文件系统损坏.\n•Secure-要求OC目录中vault.plist的vault.sig签名文件.";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer, 64 bit\nFailsafe: 0x80000000 (DEBUG_ERROR)\nDescription: EDK II debug level bitmask (sum) causing CPU to halt (stop execution) after obtaining a message of HaltLevel. Possible values match DisplayLevel values."; ObjectID = "QbL-ID-H0a"; */
"QbL-ID-H0a.ibShadowedToolTip" = "参考OC手册!";

/* Class = "NSButtonCell"; title = "Expose OEM information as a set of UEFI variables."; ObjectID = "SLo-CJ-cas"; */
"SLo-CJ-cas.title" = "将OEM信息公开为一组UEFI变量.";

/* Class = "NSTableColumn"; headerCell.title = "Enabled"; ObjectID = "SPw-C4-qwL"; */
"SPw-C4-qwL.headerCell.title" = "启用";

/* Class = "NSButtonCell"; title = "Unselect All"; ObjectID = "SZj-0R-9Uu"; */
"SZj-0R-9Uu.title" = "取消全选";

/* Class = "NSButtonCell"; title = "PollAppleHotKeys"; ObjectID = "TDv-Al-hb0"; */
"TDv-Al-hb0.title" = "PollAppleHotKeys\n启用模拟苹果热键";

/* Class = "NSTableColumn"; headerCell.title = "Arguments"; ObjectID = "ThF-JP-r8K"; */
"ThF-JP-r8K.headerCell.title" = "参数";

/* Class = "NSTextFieldCell"; title = "Hibernate Mode"; ObjectID = "TmR-t7-bmq"; */
"TmR-t7-bmq.title" = "Hibernate Mode\n休眠模式";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist string\nFailsafe: Default\nDescription: Launch path for the LauncherOption property.\n\nDefault points to OpenCore.efi. User specified paths, e.g. \\EFI\\SomeLauncher.efi, can be used to provide custom loaders, which are supposed to load OpenCore.efi themselves."; ObjectID = "Uqn-Ww-mAH"; */
"Uqn-Ww-mAH.ibShadowedToolTip" = "LauncherOption的启动路径.\n\n对于启动OpenCore.efi的其他任何路径(例如,\\EFI\\Launcher.efi, 可用于提供定制启动器, 应该自己加载OpenCore.efi.";

/* Class = "NSButtonCell"; title = "Enable logging to file"; ObjectID = "Uz7-yL-WDQ"; */
"Uz7-yL-WDQ.title" = "启用记录到文件";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer, 32 bit\nFailsafe: 0x10F0103\nDescription: Define operating system detection policy.\n\nThis value allows preventing scanning (and booting) untrusted sources based on a bitmask (sum) of a set of flags. As it is not possible to reliably detect every file system or device type, this feature cannot be fully relied upon in open environments, and additional measures are to be applied.\n\nThird party drivers may introduce additional security (and performance) consideratons following the provided scan policy. The active Scan policy is exposed in the scan-policy variable of 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102 GUID for UEFI Boot Services only.\n• 0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK, restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy. Hence, to avoid mounting of undesired file systems, drivers for such file systems should not be loaded. This bit does not affect DMG mounting, which may have any file system. Known file systems are prefixed with OC_SCAN_ALLOW_FS_.\n• 0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK, restricts scanning to only known device types defined as a part of this policy. It is not always possible to detect protocol tunneling, so be aware that on some systems, it may be possible for e.g. USB HDDs to be recognised as SATA instead. Cases like this must be reported.\nKnown device types are prefixed with OC_SCAN_ALLOW_DEVICE_.\n• 0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS, allows scanning of APFS file system.\n• 0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS, allows scanning of HFS file system.\n• 0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP, allows scanning of EFI System Partition file system.\n• 0x00000800 (bit 11) — OC_SCAN_ALLOW_FS_NTFS, allows scanning of NTFS (Msft Basic Data) file system.\n• 0x00001000 (bit 12) — OC_SCAN_ALLOW_FS_EXT, allows scanning of EXT (Linux Root) file system.\n• 0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA, allow scanning SATA devices.\n• 0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX, allow scanning SAS and Mac NVMe devices.\n• 0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI, allow scanning SCSI devices.\n• 0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME, allow scanning NVMe devices.\n• 0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI, allow scanning CD/DVD devices and old SATA.\n• 0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB, allow scanning USB devices.\n• 0x00400000 (bit 22) — OC_SCAN_ALLOW_DEVICE_FIREWIRE, allow scanning FireWire devices.\n• 0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD, allow scanning card reader devices.\n• 0x01000000 (bit 24) — OC_SCAN_ALLOW_DEVICE_PCI, allow scanning devices directly connected to PCI bus (e.g. VIRTIO).\n\nNote: Given the above description, a value of 0xF0103 is expected to do the following:\n• Permit scanning SATA, SAS, SCSI, and NVMe devices with APFS file systems.\n• Prevent scanning any devices with HFS or FAT32 file systems.\n• Prevent scanning APFS file systems on USB, CD, and FireWire drives.\n\nThe combination reads as:\n• OC_SCAN_FILE_SYSTEM_LOCK\n• OC_SCAN_DEVICE_LOCK\n• OC_SCAN_ALLOW_FS_APFS\n• OC_SCAN_ALLOW_DEVICE_SATA\n• OC_SCAN_ALLOW_DEVICE_SASEX\n• OC_SCAN_ALLOW_DEVICE_SCSI\n• OC_SCAN_ALLOW_DEVICE_NVME"; ObjectID = "VQF-Ne-GWu"; */
"VQF-Ne-GWu.ibShadowedToolTip" = "0: 允许扫描所有可用的硬盘\n其它值请参考官方文档, 对给出的选项做 16 进制加法运算";

/* Class = "NSButtonCell"; title = "OC_SCAN_FILE_SYSTEM_LOCK"; ObjectID = "Wnm-4q-QJ3"; */
"Wnm-4q-QJ3.title" = "扫描已知文件系统";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_FS_NTFS"; ObjectID = "WsC-yj-V3g"; */
"WsC-yj-V3g.title" = "允许扫描NTFS文件系统.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_SCSI"; ObjectID = "X1h-DD-gjM"; */
"X1h-DD-gjM.title" = "允许扫描SCSI设备";

/* Class = "NSTableColumn"; headerCell.title = "Name"; ObjectID = "XRf-Yz-PVv"; */
"XRf-Yz-PVv.headerCell.title" = "名称";

/* Class = "NSTableColumn"; headerCell.title = "Path*"; ObjectID = "XSQ-pS-WUn"; */
"XSQ-pS-WUn.headerCell.title" = "路径*";

/* Class = "NSButtonCell"; title = "Show Picker"; ObjectID = "YKi-Mp-w6e"; */
"YKi-Mp-w6e.title" = "Show Picker\n显示引导菜单";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_NVME"; ObjectID = "YQh-9A-q5Q"; */
"YQh-9A-q5Q.title" = "允许扫描NVMe设备";

/* Class = "NSTabViewItem"; label = "Debug"; ObjectID = "Yod-ne-FH8"; */
"Yod-ne-FH8.label" = "Debug";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Show a simple picker to allow boot entry selection."; ObjectID = "Yyf-Yd-yrP"; */
"Yyf-Yd-yrP.ibShadowedToolTip" = "显示 OpenCore 的 UI, 用于查看可用引导项\n设置为 NO 可以跳过倒计时, 和 PollAppleHotKeys=Yes 配合快捷键可以大幅提升体验\n一般选择YES.";

/* Class = "NSButtonCell"; title = "Enable basic console (onscreen) logging"; ObjectID = "ZZP-5O-C0h"; */
"ZZP-5O-C0h.title" = "启用基本控制台(屏幕上)日志记录";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer, 32 bit\nFailsafe: 0\nDescription: Timeout in seconds in the OpenCore picker before automatic booting of the default boot entry. Set to 0 to disable."; ObjectID = "Zxi-ww-dWk"; */
"Zxi-ww-dWk.ibShadowedToolTip" = "倒计时进入指定可启动系统,这里我们按需求填写,我填写5,代表5秒钟进入指定系统.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_SATA"; ObjectID = "aQY-Kx-ZCy"; */
"aQY-Kx-ZCy.title" = "允许扫描SATA设备";

/* Class = "NSTextFieldCell"; title = "Scan Policy"; ObjectID = "aUx-rK-UTX"; */
"aUx-rK-UTX.title" = "Scan Policy";

/* Class = "NSButtonCell"; title = "Use minimal UI display"; ObjectID = "ak1-aD-NH7"; */
"ak1-aD-NH7.title" = "使用最少UI显示";

/* Class = "NSButtonCell"; title = "Select All"; ObjectID = "b27-wQ-s5W"; */
"b27-wQ-s5W.title" = "全选";

/* Class = "NSButtonCell"; title = "PickerAudioAssist"; ObjectID = "cN2-ao-nCB"; */
"cN2-ao-nCB.title" = "PickerAudioAssist\n启用语音辅助";

/* Class = "NSTextFieldCell"; title = "PasswordHash"; ObjectID = "cz1-6R-TEf"; */
"cz1-6R-TEf.title" = "PasswordHash\n密码哈希";

/* Class = "NSTextFieldCell"; title = "Display Level"; ObjectID = "dam-Nc-xFX"; */
"dam-Nc-xFX.title" = "Display Level";

/* Class = "NSTableColumn"; headerCell.title = "TextMode"; ObjectID = "deu-Ec-YkZ"; */
"deu-Ec-YkZ.headerCell.title" = "文本模式";

/* Class = "NSButtonCell"; title = "Provides predefined label images for boot entries without custom entries"; ObjectID = "dl8-kF-ipf"; */
"dl8-kF-ipf.title" = "为引导项提供预定义的标签图像,而无需自定义项";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Produce system report on ESP folder.\n\nThis option will create a SysReport directory in the ESP partition unless already present. The directory will contain ACPI, SMBIOS, and audio codec dumps. Audio codec dumps require an audio backend driver to be loaded.\n\nNote: To maintain system integrity, the SysReport option is not available in RELEASE builds. Use a DEBUG build if this option is required."; ObjectID = "eFH-QH-phT"; */
"eFH-QH-phT.ibShadowedToolTip" = "在EFI分区上生成系统报告.\n此选项将在ESP分区上创建SysReport目录, 该目录将包含ACPI和SMBIOS以及音频codec转储.音频编解码器转储需要加载音频后端驱动程序.\n\n注意：出于安全原因,RELEASE版本中不提供SysReport功能.如果需要此选项,请使用DEBUG版本.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_USB"; ObjectID = "eFc-bE-Fl5"; */
"eFc-bE-Fl5.title" = "允许扫描USB设备";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Arguments\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used as boot arguments (load options) of the specified entry.\n2. Comment\nType: plist string\nFailsafe: Empty\nDescription: Arbitrary ASCII string used to provide human readable reference for the entry. Whether this value is used is implementation defined.\n3. Auxiliary\nType: plist boolean\nFailsafe: false\nDescription: This entry will not be listed by default when HideAuxiliary is set to true.\n4. Enabled\nType: plist boolean\nFailsafe: false\nDescription: This tool will not be listed unless set to true.\n5. Name\nType: plist string\nFailsafe: Empty\nDescription: Human readable tool name displayed in boot picker.\n6. Path\nType: plist string\nFailsafe: Empty\nDescription: File path to select UEFI tool relative to OC/Tools directory.\n7. RealPath\nType: plist boolean\nFailsafe: false\nDescription: Pass full path to the tool when launching.\n\nPassing tool directory may be unsafe for tool accidentally trying to access files without checking their integrity and thus should generally be disabled. Reason to enable this property may include cases where tools cannot work without external files or may need them for better function (e.g. memtest86 for logging and configuration or Shell for automatic script execution).\n\nNote: This property is only valid for Tools. For Entries this property cannot be specified and is always true.\n\n8. TextMode\nType: plist boolean\nFailsafe: false\nDescription: Run the entry in text mode instead of graphics mode.\n\nThis setting may be benefitial to some older tools that require text output. By default all the tools are launched in graphics mode. Read more about text modes in the Output Properties section below."; ObjectID = "eH6-nm-MdQ"; */
"eH6-nm-MdQ.ibShadowedToolTip" = "用于运行一些UEFI工具, 例如验证CFG Lock(VerifyMsrE2.efi),CleanNvram.efi\n名称:OpenCore 启动项中显示的名称\n启用:启用或禁用\n辅助:设置条目为辅助属性\n路径:Tools文件夹下的文件名\n如: VerifyMsrE2.efi,Shell.efi等\n\nRealPath(真实路径):启动时将完整路径传递给工具.\n传递工具目录对于不小心尝试访问文件而不检查其完整性的工具可能是不安全的,因此通常应将其禁用. 启用此属性的原因可能包括在没有外部文件的情况下工具无法工作或可能需要它们以实现更好的功能的情况 (例如memtest86用于日志记录和配置,或Shell用于自动脚本执行).\n注意：此属性仅对工具有效. 对于条目,无法指定此属性,并且始终为true.\n\nTextMode(文本模式): 是否以文本模式而不是图形模式运行条目.\n对于某些需要文本输出的较旧的工具,此设置可能是有益的.默认情况下,所有工具均以图形模式启动.在下面的“输出属性”部分中阅读有关文本模式的更多信息.";

/* Class = "NSTextFieldCell"; title = "Picker Attributes"; ObjectID = "eaZ-uU-2Tt"; */
"eaZ-uU-2Tt.title" = "Picker Attributes\nGUI界面设置属性";

/* Class = "NSTextFieldCell"; title = "Vault"; ObjectID = "fN9-q5-dg3"; */
"fN9-q5-dg3.title" = "Vault";

/* Class = "NSTextFieldCell"; title = "DmgLoading"; ObjectID = "fVY-aJ-OPc"; */
"fVY-aJ-OPc.title" = "DmgLoading";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enable writing the boot.efi debug log to the OpenCore log.\n\nNote: This option only applies to 10.15.4 and newer."; ObjectID = "fcn-ha-taM"; */
"fcn-ha-taM.ibShadowedToolTip" = "启用boot.efi调试日志保存到OpenCore日志.\n\n注意：此选项仅适用于10.15.4及更高版本.";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Perform serial port initialisation.\n\nThis option will perform serial port initialisation within OpenCore prior to enabling (any) debug logging. Serial port configuration is defined via PCDs at compile time in gEfiMdeModulePkgTokenSpaceGuid GUID.\n\nDefault values as found in MdeModulePkg.dec are as follows:\n• PcdSerialBaudRate — Baud rate: 115200.\n• PcdSerialLineControl — Line control: no parity, 8 data bits, 1 stop bit.\n\nRefer to the Debugging section for details."; ObjectID = "fmg-zD-rrJ"; */
"fmg-zD-rrJ.ibShadowedToolTip" = "执行串行端口初始化.\n此选项将在启用调试日志记录之前在OpenCore中执行串行端口初始化.默认值如下:\n• PcdSerialBaudRate — Baud rate: 115200.\n• PcdSerialLineControl — Line control: no parity, 8 data bits, 1 stop bit.\n\n在“调试”部分中查看更多详细信息.";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer\nFailsafe: 0\nDescription: Sets specific attributes for picker.\n\nThe text renderer supports colour arguments as a sum of foreground and background colours based on the UEFI specification. The value for black background and for black foreground, 0, is reserved.\n\nList of colour values and names:\n• 0x00 — EFI_BLACK\n• 0x01 — EFI_BLUE\n• 0x02 — EFI_GREEN\n• 0x03 — EFI_CYAN\n• 0x04 — EFI_RED\n• 0x05 — EFI_MAGENTA\n• 0x06 — EFI_BROWN\n• 0x07 — EFI_LIGHTGRAY\n• 0x08 — EFI_DARKGRAY\n• 0x09 — EFI_LIGHTBLUE\n• 0x0A — EFI_LIGHTGREEN\n• 0x0B — EFI_LIGHTCYAN\n• 0x0C — EFI_LIGHTRED\n• 0x0D — EFI_LIGHTMAGENTA \n• 0x0E — EFI_YELLOW\n• 0x0F — EFI_WHITE\n• 0x00 — EFI_BACKGROUND_BLACK\n• 0x10 — EFI_BACKGROUND_BLUE\n• 0x20 — EFI_BACKGROUND_GREEN\n• 0x30 — EFI_BACKGROUND_CYAN\n• 0x40 — EFI_BACKGROUND_RED\n• 0x50 — EFI_BACKGROUND_MAGENTA\n• 0x60 — EFI_BACKGROUND_BROWN\n• 0x70 — EFI_BACKGROUND_LIGHTGRAY\n\nNote: This option may not work well with the System text renderer. Setting a background different from black could help with testing GOP functionality."; ObjectID = "gD0-Iz-n35"; */
"gD0-Iz-n35.ibShadowedToolTip" = "设置启动菜单的颜色属性.\n支持根据UEFI规范将颜色参数的前景色和背景色之和计算并转为十进制填入.\n颜色名称列表：\n•0x00-EFI_BLACK\n•0x01-EFI_BLUE\n•0x02-EFI_GREEN\n•0x03-EFI_CYAN\n•0x04-EFI_RED\n•0x05-EFI_MAGENTA\n•0x06-EFI_BROWN\n•0x07-EFI_LIGHTGRAY\n•0x08-EFI_DARKGRAY\n•0x09-EFI_LIGHTBLUE\n•0x0A-EFI_LIGHTGREEN\n•0x0B-EFI_LIGHTCYAN\n•0x0C-EFI_LIGHTRED\n•0x0D-EFI_LIGHTMAGENTA\n•0x0E-EFI_BACKGROUND_LIGHTGRAY\n•0x0F-EFI_WHITE\n•0x00-EFI_BACKGROUND_BLACK\n•0x10-EFI_BACKGROUND_BLUE\n•0x20-EFI_BACKGROUND_GREEN\n•0x30-EFI_BACKGROUND_CYAN\n•0x40-EFI_BACK_ROG_RO_ROUND_RED\n•0x50-EFI_BACKGROUND_MAGENTA\n•0x60-EFI_BACKGROUND_BROWN\n•0x70-EFI_BACKGROUND_LIGHTGRAY\n注意：此选项可能不适用于系统文本渲染器.设置与黑色不同的背景可以帮助测试正确的GOP功能.";

/* Class = "NSTextFieldCell"; title = "Target"; ObjectID = "hAm-Ha-Meb"; */
"hAm-Ha-Meb.title" = "Target";

/* Class = "NSButtonCell"; title = "SerialInit"; ObjectID = "hRO-hk-wy8"; */
"hRO-hk-wy8.title" = "SerialInit";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer\nFailsafe: 0\nDescription: Sets specific attributes the OpenCore picker.\n\nDifferent OpenCore pickers may be configured through the attribute mask containing OpenCore-reserved (BIT0~BIT15) and OEM-specific (BIT16~BIT31) values.\nCurrent OpenCore values include:\n• 0x0001 — OC_ATTR_USE_VOLUME_ICON, provides custom icons for boot entries:\n\tFor Tools, OpenCore will attempt loading a custom icon and fallback to a default icon on failure:\n\t\t– ResetNVRAM — Resources\\Image\\ResetNVRAM.icns — ResetNVRAM.icns from icons directory.\n\t\t– Tools\\<TOOL_RELATIVE_PATH>.icns — icon near the tool file with appended .icns extension.\n\t\n\tFor custom boot Entries, OpenCore will attempt loading a custom icon and fallback to the volume icon or the default icon on failure:\n\t\t– <ENTRY_PATH>.icns — icon near the entry file with appended .icns extension.\n\t\n\tFor all other entries, OpenCore will attempt loading a volume icon by searching as follows, and will fallback to the default icon on failure:\n\t\t– .VolumeIcon.icnsfileatPrebootvolumeinper-volumedirectory(/System/Volumes/Preboot/{GUID}/ when mounted at the default location within macOS) for APFS (if present).\n\t\t– .VolumeIcon.icns file at Preboot root (/System/Volumes/Preboot/, when mounted at the default location within macOS) for APFS (otherwise).,\n\t\t– .VolumeIcon.icns file at the volume root for other filesystems.\n\nNote 1: The Apple picker partially supports placing a volume icon file at the operating system’s Data volume root, /System/Volumes/Data/, when mounted at the default location within macOS. This approach is flawed: the file is neither accessible to OpenCanopy nor to the Apple picker when FileVault 2, which is meant to be the default choice, is enabled. Therefore, OpenCanopy does not attempt supporting Apple’s approach. A volume icon file may be placed at the root of the Preboot volume for compatibility with both OpenCanopy and the Apple picker, or use the Preboot per-volume location as above with OpenCanopy as a preferred alternative to Apple’s approach.\n\nNote 2: Be aware that using a volume icon on any drive overrides the normal OpenCore picker behaviour for that drive of selecting the appropriate icon depending on whether the drive is internal or external.\n\n• 0x0002 — OC_ATTR_USE_DISK_LABEL_FILE, provides custom rendered titles for boot entries: – .disk_label (.disk_label_2x) file near bootloader for all filesystems.\n\t– <TOOL_NAME>.lbl (<TOOL_NAME>.l2x) file near tool for Tools.\n\tPrerendered labels can be generated via the disklabel utility or the bless command. When disabled or missing text labels, (.contentDetails or .disk_label.contentDetails) are to be rendered instead.\n• 0x0004 — OC_ATTR_USE_GENERIC_LABEL_IMAGE, provides predefined label images for boot entries without custom entries. This may however give less detail for the actual boot entry.\n• 0x0008 — OC_ATTR_HIDE_THEMED_ICONS, prefers builtin icons for certain icon categories to match the theme style. For example, this could force displaying the builtin Time Machine icon. Requires OC_ATTR_USE_VOLUME_ICON.\n• 0x0010 — OC_ATTR_USE_POINTER_CONTROL, enables pointer control in the OpenCore picker when available.\n\tFor example, this could make use of mouse or trackpad to control UI elements.\n• 0x0020 — OC_ATTR_DEBUG_DISPLAY, enable display of additional timing and debug information, in Builtin picker in DEBUG and NOOPT builds only.\n• 0x0040 — OC_ATTR_USE_MINIMAL_UI, use minimal UI display, no Shutdown or Restart buttons, affects OpenCanopy and builtin picker."; ObjectID = "hdQ-rL-KAo"; */
"hdQ-rL-KAo.ibShadowedToolTip" = "设置启动菜单(GUI界面)的属性.\n可以配置自定义的GUI界面风格,设置值包括:\n• 0x0001 —提供引导项的自定义图标:\n\t– APFS分区的预引导根目录下的.VolumeIcon.icns文件. \n\t– 其他文件系统的卷根目录下的.VolumeIcon.icns文件.\n\t– <TOOL_NAME>.icns的工具图标文件.￼ \n可以在Finder中设置卷图标. \n• 0x0002 — 提供引导条目的自定义渲染标题:  \t– 引导器相关的.disk_label（.disk_label_2x）文件,用于所有文件系统. \t– 工具相关的<TOOL_NAME.lbl和<TOOL_NAME.l2x文件. 可以通过disklabel实用程序或bless命令生成预渲染的标签.禁用或缺少文本标签时 (.contentDetails 或 .disk_label.contentDetails) 将被使用.\n• 0x0004 — 提供引导条目的预定义标签图像,而无需自定义条目. 可能会缺少实际启动项的详细信息. \n• 0x0008 — OC_ATTR_HIDE_THEMED_ICONS, 设置某些图标类别的内置图标以匹配主题样式. 这可能会强制显示内置的Time Machine图标. 需要OC_ATTR_USE_VOLUME_ICON.\n• 0x0010 — 在选择器中启用指针控制(如果可用).这可以利用鼠标或触控板来控制UI元素. \n• 0x0020 — OC_ATTR_DEBUG_DISPLAY, 启用显示其他时序和调试信息, 在DEBUG和NOOPT中的文本菜单中.\n• 0x0040 — OC_ATTR_USE_MINIMAL_UI, 使用最少的UI显示, 没有关机或重启按钮, 图形化启动菜单和文本启动菜单都有效.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_ATAPI"; ObjectID = "i2m-65-2vq"; */
"i2m-65-2vq.title" = "允许扫描CD/DVD设备";

/* Class = "NSTextFieldCell"; title = "LauncherOption"; ObjectID = "i5B-oK-z1D"; */
"i5B-oK-z1D.title" = "LauncherOption";

/* Class = "NSButtonCell"; title = "Download/Update tools"; ObjectID = "i6P-Lb-eX2"; */
"i6P-Lb-eX2.title" = "下载/更新 EFI工具";

/* Class = "NSTableColumn"; headerCell.title = "Path*"; ObjectID = "jPS-Bu-Ar4"; */
"jPS-Bu-Ar4.headerCell.title" = "路径*";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string \nFailsafe: Default\nDescription: Apple Secure Boot hardware model.\n\nSets Apple Secure Boot hardware model and policy. Specifying this value defines which operating systems will be bootable. Operating systems shipped before the specified model was released will not boot.\n\nValid values:\n• Default — Recent available model, currently set to j137.\n• Disabled — No model, Secure Boot will be disabled.\n• j137 — iMacPro1,1 (December 2017) minimum macOS 10.13.2 (17C2111)\n• j680 — MacBookPro15,1 (July 2018) minimum macOS 10.13.6 (17G2112)\n• j132 — MacBookPro15,2 (July 2018) minimum macOS 10.13.6 (17G2112)\n• j174 — Macmini8,1 (October 2018) minimum macOS 10.14 (18A2063)\n• j140k — MacBookAir8,1 (October 2018) minimum macOS 10.14.1 (18B2084)\n• j780 — MacBookPro15,3 (May 2019) minimum macOS 10.14.5 (18F132)\n• j213 — MacBookPro15,4 (July 2019) minimum macOS 10.14.5 (18F2058)\n• j140a — MacBookAir8,2 (July 2019) minimum macOS 10.14.5 (18F2058)\n• j152f — MacBookPro16,1 (November 2019) minimum macOS 10.15.1 (19B2093)\n• j160 — MacPro7,1 (December 2019) minimum macOS 10.15.1 (19B88)\n• j230k — MacBookAir9,1 (March 2020) minimum macOS 10.15.3 (19D2064)\n• j214k — MacBookPro16,2 (May 2020) minimum macOS 10.15.4 (19E2269)\n• j223 — MacBookPro16,3 (May 2020) minimum macOS 10.15.4 (19E2265)\n• j215 — MacBookPro16,4 (June 2020) minimum macOS 10.15.5 (19F96)\n• j185 — iMac20,1 (August 2020) minimum macOS 10.15.6 (19G2005)\n• j185f — iMac20,2 (August 2020) minimum macOS 10.15.6 (19G2005)\n• x86legacy — Macs and VMs without T2 chip minimum macOS 11.0\n\nPlatformInfo and SecureBootModel are independent, allowing to enabling Apple Secure Boot with any SMBIOS.\nSetting SecureBootModel to any valid value but Disabled is equivalent to Medium Security of Apple Secure Boot. The ApECID value must also be specified to achieve Full Security.\n\nNote that enabling Apple Secure Boot is demanding on invalid configurations, faulty macOS installations, and on unsupported setups.\n\nThings to consider:\n(a) As with T2 Macs, all unsigned kernel extensions as well as several signed kernel extensions, including NVIDIA Web Drivers, cannot be installed.\n(b) The list of cached kernel extensions may be different, resulting in a need to change the list of Added or Forced kernel extensions. For example, IO80211Family cannot be injected in this case.\n(c) System volume alterations on operating systems with sealing, such as macOS 11, may result in the operating system being unbootable. Do not try to disable system volume encryption unless Apple Secure Boot is disabled.\n(d) Boot failures might occur when the platform requires certain settings, but they have not been enabled because the associated issues were not discovered earlier. Be extra careful with IgnoreInvalidFlexRatio or HashServices.\n(e) Operating systems released before Apple Secure Boot was released (e.g. macOS 10.12 or earlier), will still boot until UEFI Secure Boot is enabled. This is so because Apple Secure Boot treats these as incompatible and they are then handled by the firmware (as Microsoft Windows is).\n(f) On older CPUs (e.g. before Sandy Bridge), enabling Apple Secure Boot might cause slightly slower loading (by up to 1 second).\n(g) As the Default value will increase with time to support the latest major released operating system, it is not recommended to use the ApECID and the Default settings together.\n(h) Installing macOS with Apple Secure Boot enabled is not possible while using HFS+ target volumes. This may include HFS+ formatted drives when no spare APFS drive is available.\n\nThe installed operating system may have sometimes outdated Apple Secure Boot manifests on the Preboot partition, resulting in boot failures. This is likely to be the case when an “OCB: Apple Secure Boot prohibits this boot entry, enforcing!” message is logged.\n\nWhen this happens, either reinstall the operating system or copy the manifests (files with .im4m extension, such as boot.efi.j137.im4m) from /usr/standalone/i386 to /Volumes/Preboot/<UUID>/System/Library/CoreServices. Here, <UUID> is the system volume identifier. On HFS+ installations, the manifests should be copied to /System/Library/CoreServices on the system volume.\n\nFor more details on how to configure Apple Secure Boot with UEFI Secure Boot, refer to the UEFI Secure Boot"; ObjectID = "l6D-xS-M37"; */
"l6D-xS-M37.ibShadowedToolTip" = "Apple安全启动硬件模型.\n定义Apple安全启动硬件模型和策略. 指定此值将定义可引导的操作系统. 在指定型号发布之前出厂的操作系统将无法启动.有效值:\n\n• Default — 最近可用的模型,当前设置为j137.\n• Disabled — 没有型号,安全启动将被禁用.\n• j137 — iMacPro1,1 (2017年12月),最低macOS 10.13.2（17C2111）\n• j680 — MacBookPro15,1 (2018年七月),最低macOS 10.13.6（17C2112）\n• j132 — MacBookPro15,2 (2018年七月),最低macOS 10.13.6（17C2112）\n• j174 — Macmini8,1 (2018年十月) 最低macOS 10.14（18A2063）\n• j140k — MacBookAir8,1 (2018年十月) 最低macOS 10.14.1 (18B2084)\n• j780 — MacBookPro15,3 (2019年五月) 最低macOS 10.14.5 (18F132)\n• j213 — MacBookPro15,4 (2019年七月) 最低macOS 10.14.5 (18F2058)\n• j140a — MacBookAir8,2 (2019年七月) 最低macOS 10.14.5 (18F2058)\n• j152f — MacBookPro16,1 (2019年十一月) 最低macOS 10.15.1 (19B2093)\n• j160 — MacPro7,1 (2019年十二月) 最低macOS 10.15.1 (19B88)\n• j230k — MacBookAir9,1 (2020年3月) 最低macOS 10.15.3 (19D2064)\n• j214k — MacBookPro16,2 (2020年5月) 最低macOS 10.15.4 (19E2269)\n• j223 — MacBookPro16,3 (2020年5月) 最低macOS 10.15.4 (19E2265)\n• j215 — MacBookPro16,4 (2020年6月) 最低macOS 10.15.5 (19F96)\n• j185 — iMac20,1 (2020年8月) 最低macOS 10.15.6 (19G2005)\n• j185f — iMac20,2 (2020年8月) 最低macOS 10.15.6 (19G2005)\n\nPlatformInfo和SecureBootModel是独立的,从而可以通过任何SMBIOS启用Apple Secure Boot.\n将SecureBootModel设置为任何有效值但Disabled等效于Apple Secure Boot的\"中级安全性\". 要获得完全安全性,还需要指定ApECID值.\n\n注意: 默认值会随着时间的增加而增加,以支持最新的主发行版操作系统. 不建议同时使用ApECID和默认值.";

/* Class = "NSButtonCell"; title = "EnablePassword"; ObjectID = "lLV-4d-gWP"; */
"lLV-4d-gWP.title" = "EnablePassword\n启用密码保护";

/* Class = "NSButtonCell"; title = "SkipCustomEntryCheck"; ObjectID = "mB0-8o-rL6"; */
"mB0-8o-rL6.title" = "SkipCustomEntryCheck";

/* Class = "NSButtonCell"; title = "DEBUG_VERBOSE in custom builds"; ObjectID = "mSr-7J-5Qp"; */
"mSr-7J-5Qp.title" = "自定义版本中的DEBUG_VERBOSE";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_FS_APFS"; ObjectID = "mpH-5M-L70"; */
"mpH-5M-L70.title" = "允许扫描APFS文件系统";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_FIREWIRE"; ObjectID = "nmh-33-tbM"; */
"nmh-33-tbM.title" = "允许扫描FireWire设备";

/* Class = "NSTabViewItem"; label = "Tools"; ObjectID = "oFg-pn-DgG"; */
"oFg-pn-DgG.label" = "Tools-添加附加工具";

/* Class = "NSButtonCell"; title = "Unselect All"; ObjectID = "oL1-jF-NNm"; */
"oL1-jF-NNm.title" = "取消全选";

/* Class = "NSTextFieldCell"; title = "SecureBootModel"; ObjectID = "oef-cz-Kqc"; */
"oef-cz-Kqc.title" = "SecureBootModel";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer, 64 bit\nFailsafe: 0\nDescription: EDK II debug level bitmask (sum) showed onscreen. Unless Target enables console (onscreen) printing, onscreen debug output will not be visible.\n\nThe following levels are supported:\n• 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. \n• 0x00000040 — DEBUG_INFO in DEBUG, NOOPT.\n• 0x00400000 — DEBUG_VERBOSE in custom builds.\n• 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE."; ObjectID = "omf-bH-d4v"; */
"omf-bH-d4v.ibShadowedToolTip" = "2147483714 在屏幕上显示所有 Debug 信息\n0 隐藏所有 Debug 信息!";

/* Class = "NSButtonCell"; title = "Select All"; ObjectID = "pIV-PK-mVi"; */
"pIV-PK-mVi.title" = "全选";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Allow CMD+OPT+P+R handling and enable showing NVRAM Reset entry in OpenCore picker.\n\nNote 1: It is known that some Lenovo laptops have a firmware bug, which makes them unbootable after performing NVRAM reset.\n\nNote 2: Resetting NVRAM will also erase any boot options not backed up using the bless command. For example, Linux installations to custom locations not specified in BlessOverride."; ObjectID = "pTC-aG-QK1"; */
"pTC-aG-QK1.ibShadowedToolTip" = "允许CMD + OPT + P + R或在启动菜单中显示ResetNVRAM重置菜单.\n\n提示:尽量不使用此项功能,用cleanNVRAM.efi工具替代,因为一些主板适用此功能后会导致启动黑屏而且无法进入BIOS界面的'硬件损坏'!";

/* Class = "NSTextField"; ibShadowedToolTip = "Type: plist data\nFailsafe: empty\nDescription: Password salt used when EnabledPassword is set."; ObjectID = "pYq-Ve-K08"; */
"pYq-Ve-K08.ibShadowedToolTip" = "设置启用密码保护时使用密码加盐算法.";

/* Class = "NSTextFieldCell"; title = "Halt Level"; ObjectID = "pqr-DX-ZAM"; */
"pqr-DX-ZAM.title" = "Halt Level";

/* Class = "NSButtonCell"; title = "AllowSetDefault"; ObjectID = "qpq-Le-cti"; */
"qpq-Le-cti.title" = "AllowSetDefault\n启用设置默认启动项";

/* Class = "NSButtonCell"; title = "Enable pointer control in the picker when available"; ObjectID = "r8W-nu-W4X"; */
"r8W-nu-W4X.title" = "启用启动菜单中的指针控制(如果可用)";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Allow CTRL+Enter and CTRL+Index handling to set the default boot option in boot picker;\n\nNote 1: May be used in combination with Shift+Enter or Shift+Index when PollAppleHotKeys is enabled.\n\nNote 2: In order to support systems with unresponsive modifiers during preboot (which includes V1 and V2 KeySupport mode on some firmware) OpenCore also allows holding the =/+ key in order to trigger ‘set default’ mode."; ObjectID = "rQF-20-vFl"; */
"rQF-20-vFl.ibShadowedToolTip" = "允许用CTRL+Enter或CTRL+Index(启动菜单项目编号)来设置启动菜单中的下次默认启动选项.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_SDCARD"; ObjectID = "sti-pn-v4l"; */
"sti-pn-v4l.title" = "允许扫描读卡器设备";

/* Class = "NSButtonCell"; title = "AppleDebug"; ObjectID = "tBp-D4-d9x"; */
"tBp-D4-d9x.title" = "AppleDebug";

/* Class = "NSButtonCell"; title = "AuthRestart"; ObjectID = "tI2-d3-co4"; */
"tI2-d3-co4.title" = "AuthRestart\n身份验证重启";

/* Class = "NSButtonCell"; title = "Provides custom icons for boot entries"; ObjectID = "tLD-8o-zGU"; */
"tLD-8o-zGU.title" = "为引导项提供自定义图标";

//* Class = "NSTextField"; ibShadowedToolTip = "Type: plist integer\nFailsafe: 0x6\nDescription: Sensitive data exposure bitmask (sum) to operating system.\n• 0x01 — Expose the printable booter path as an UEFI variable.\n• 0x02 — Expose the OpenCore version as an UEFI variable.\n• 0x04 — Expose the OpenCore version in the OpenCore picker menu title.\n• 0x08 — Expose OEM information as a set of UEFI variables.\n\nThe exposed booter path points to OpenCore.efi or its booter depending on the load order. To obtain the booter path, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-path\n\nTo use booter path for mounting booter volume use the following command in macOS:\nu=$(nvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:boot-path | sed 's/.*GPT,\\([^,]*\\),.*/\\1/'); \\ if [ \"$u\" != \"\" ]; then sudo diskutil mount $u ; fi\n\nTo obtain the current OpenCore version, use the following command in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:opencore-version\n\nTo obtain OEM information, use the following commands in macOS:\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-product # SMBIOS Type1 ProductName\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-vendor # SMBIOS Type2 Manufacturer\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:oem-board # SMBIOS Type2 ProductName"; ObjectID = "tmf-fU-Pjy"; */
"tmf-fU-Pjy.ibShadowedToolTip" = "3 - 将 OpenCore 的启动路径和版本储存进 NVRAM\n11 - 在 3 的基础上添加主板 OEM 信息, HWMonitorSMC2 和 NVMeFix 需要主板 OEM 信息才能正常工作\n6 - 如果要在引导菜单显示OC版本号,填6\n15 - 暴露所有NVRAM信息.";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "uSO-ne-MBg"; */
"uSO-ne-MBg.headerCell.title" = "说明";

/* Class = "NSButtonCell"; title = "Enable logging, otherwise all log is discarded"; ObjectID = "uWH-Lw-aeI"; */
"uWH-Lw-aeI.title" = "启用日志记录,否则所有日志将被丢弃";

/* Class = "NSTabViewItem"; label = "Entries"; ObjectID = "uks-Bw-Ph4"; */
"uks-Bw-Ph4.label" = "Entries-自定义条目";

/* Class = "NSTabViewItem"; label = "BlessOverride"; ObjectID = "uyb-X6-nFt"; */
"uyb-X6-nFt.label" = "BlessOverride-设置自定义启动项绝对路径";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enable modifier hotkey handling in the OpenCore picker.\n\nIn addition to action hotkeys, which are partially described in the PickerMode section and are typically handled by Apple BDS, modifier keys handled by the operating system bootloader (boot.efi) also exist. These keys allow changing the behaviour of the operating system by providing different boot modes.\n\nOn certain firmware, using modifier keys may be problematic due to driver incompatibilities. To workaround this problem, this option allows registering certain hotkeys in a more permissive manner from within the OpenCore picker. Such extensions include support for tapping on key combinations before selecting the boot item, and for reliable detection of Shift along with other keys instead of only pressing the Shift key when selecting the boot item, in order to work around the fact that hotkeys which are continuously held during boot cannot be reliably detected on many PS/2 keyboards.\n\nThis list of known modifier hotkeys includes:\n• CMD+C+MINUS — disable board compatibility checking.\n• CMD+K — boot release kernel, similar to kcsuffix=release.\n• CMD+S — single user mode.\n• CMD+S+MINUS — disable KASLR slide, requires disabled SIP.\n• CMD+V — verbose mode.\n• Shift+Enter, Shift+Index — safe mode, may be used in combination with CTRL+Enter, CTRL+Index."; ObjectID = "vvg-w7-KxC"; */
"vvg-w7-KxC.ibShadowedToolTip" = "是否开启一些热键功能,包括Cmd+K;Cmd+S.\n设置为YES后允许在引导过程中使用苹果原生快捷键, 需要与Quirk选项中KeySupport=Yes或UsbKbDxe.efi结合使用, 具体体验取决于主板固件.常用快捷键组合:\nCmd + V: 启用 -v 跑码啰嗦模式\nCmd + Opt + P + R: 重置 NVRAM\nCmd + R: 启动恢复分区\nCmd + S: 启动至单用户模式\nOption/ALT: 在ShowPicker设置成NO时显示引导菜单, ALT键不可用时可用ESC键代替(狂按ESC键).\n如果你开机发现键盘无法选择,请选NO,并且删除OC/Drivers下的UsbKbDxe.efi .";

/* Class = "NSTableColumn"; headerCell.title = "Arguments"; ObjectID = "wFf-6v-O3P"; */
"wFf-6v-O3P.headerCell.title" = "参数";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Type: plist string\nFailsafe: None\nDescription: Hibernation detection mode. The following modes are supported:\n• None — Ignore hibernation state.\n• Auto — Use RTC and NVRAM detection.\n• RTC — Use RTC detection.\n• NVRAM — Use NVRAM detection.\n\nNote: If the firmware can handle hibernation itself (valid for Mac EFI firmware), then None should be specified to hand-off hibernation state as is to OpenCore."; ObjectID = "wPi-6s-R0s"; */
"wPi-6s-R0s.ibShadowedToolTip" = "检测休眠模式.我们的机器一般都不支持休眠,选none.如果你的主板支持原生nvram、并想测试休眠,可以考虑填auto.\n与系统内的休眠模式配合, 引导进系统会还原休眠前的状态, 这个可能功能会影响SSD寿命, 建议关闭!";

/* Class = "NSButtonCell"; title = "Enable display of additional timing and debug information, in Builtin picker in DEBUG and NOOPT builds only."; ObjectID = "xjK-fm-3ud"; */
"xjK-fm-3ud.title" = "启用显示其他时间和调试信息的功能,仅在DEBUG和NOOPT构建的内置选取器中有用.";

/* Class = "NSTextFieldCell"; title = "TakeoffDelay"; ObjectID = "yDl-hK-Eml"; */
"yDl-hK-Eml.title" = "TakeoffDelay\n激活快捷键延迟";

/* Class = "NSButtonCell"; title = "OC_SCAN_DEVICE_LOCK"; ObjectID = "yNo-gi-9zr"; */
"yNo-gi-9zr.title" = "扫描已知设备类型";

/* Class = "NSTableColumn"; headerCell.title = "Auxiliary"; ObjectID = "yTI-cV-qsU"; */
"yTI-cV-qsU.headerCell.title" = "辅助";

/* Class = "NSButtonCell"; title = "ApplePanic"; ObjectID = "yaU-Lw-vco"; */
"yaU-Lw-vco.title" = "ApplePanic";

/* Class = "NSTextFieldCell"; title = "LauncherPath"; ObjectID = "ykx-r5-I09"; */
"ykx-r5-I09.title" = "LauncherPath";

/* Class = "NSButtonCell"; title = "Expose printable booter path as an UEFI variable."; ObjectID = "z6D-gM-UDa"; */
"z6D-gM-UDa.title" = "将可打印的引导程序路径公开为UEFI变量.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_FS_HFS"; ObjectID = "zCH-tB-ca6"; */
"zCH-tB-ca6.title" = "允许扫描HFS文件系统";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Set to true to hide auxiliary entries from the picker menu.\nAn entry is considered auxiliary when at least one of the following applies:\n• Entry is macOS recovery.\n• Entry is macOS Time Machine.\n• Entry is explicitly marked as Auxiliary.\n• Entry is system (e.g. Reset NVRAM).\n\nTo display all entries, the picker menu can be reloaded into “Extended Mode” by pressing the Spacebar key. Hiding auxiliary entries may increase boot performance on multi-disk systems."; ObjectID = "zgV-bT-EgH"; */
"zgV-bT-EgH.ibShadowedToolTip" = "隐藏选择器菜单中的辅助条目,如果启用隐藏默认条目,选为YES.\n至少满足以下条件之一时,该条目被认为是辅助条目:\n•条目是macOS Recovery.\n•条目被明确标记为辅助.\n•条目是一个efi程序(例如Clean NVRAM)\n\n通过按空格键,重新加载所有条目选择器菜单.";

/* Class = "NSButtonCell"; title = "OC_SCAN_ALLOW_DEVICE_SASEX"; ObjectID = "zj4-Hs-Xjk"; */
"zj4-Hs-Xjk.title" = "允许扫描SAS和Mac NVMe设备";

/* Class = "NSButtonCell"; title = "DEBUG_ERROR in DEBUG, NOOPT, RELEASE"; ObjectID = "zlC-gM-dIj"; */
"zlC-gM-dIj.title" = "DEBUG,NOOPT和RELEASE中的DEBUG_ERROR";
